terraform {
  backend "s3" {}
}

# ---------------------------------
# (Your provider/inputs)
# ---------------------------------
variable "region" {
  type    = string
  default = "us-east-1"
}

provider "aws" {
  region = var.region
}

# ---------------------------------
# EC2 discovery (as in your file)
# ---------------------------------
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

# ---------------------------------
# Variables for Lambda (as in your file)
# ---------------------------------
variable "lambda_function_names" {
  type    = list(string)
  default = []
}

# ---------------------------------
# Locals build the metrics arrays
# ---------------------------------
locals {
  # ---------- EC2 ----------
  ec2_instances = values(data.aws_instance.instance_details)

  cpu_metrics = [
    for inst in local.ec2_instances : [
      "AWS/EC2", "CPUUtilization", "InstanceId", inst.id,
      { "label" : "CPU - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]
  mem_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "mem_used_percent", "InstanceId", inst.id,
      { "label" : "%MEM - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]
  disk_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "disk_used_percent", "InstanceId", inst.id,
      { "label" : "%Disk - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]

  ec2_all_metrics  = concat(local.cpu_metrics, local.mem_metrics, local.disk_metrics)
  ec2_metrics_json = jsonencode(local.ec2_all_metrics)

  # ---------- Lambda ----------
  lambda_invocations = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Invocations", "FunctionName", fn, { "label": "Invocations - ${fn}" }
    ]
  ]
  lambda_errors = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Errors", "FunctionName", fn, { "label": "Errors - ${fn}" }
    ]
  ]
  lambda_duration = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Duration", "FunctionName", fn, { "label": "Duration - ${fn}" }
    ]
  ]
  lambda_throttles = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Throttles", "FunctionName", fn, { "label": "Throttles - ${fn}" }
    ]
  ]
  lambda_concurrent = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "ConcurrentExecutions", "FunctionName", fn, { "label": "Concurrent - ${fn}" }
    ]
  ]
  lambda_all_metrics  = concat(local.lambda_invocations, local.lambda_errors, local.lambda_duration, local.lambda_throttles, local.lambda_concurrent)
  lambda_metrics_json = jsonencode(local.lambda_all_metrics)

  # ---------- SSM RunCommand ----------
  ssm_metrics = [
    [ "AWS/SSM-RunCommand", "CommandsSucceeded",        { "label": "SSM Commands Succeeded" } ],
    [ "AWS/SSM-RunCommand", "CommandsFailed",           { "label": "SSM Commands Failed" } ],
    [ "AWS/SSM-RunCommand", "CommandsDeliveryTimedOut", { "label": "SSM Commands DeliveryTimedOut" } ]
  ]
  ssm_metrics_json = jsonencode(local.ssm_metrics)

  # ---------- EFS (NO IDs) ----------
  # Use SEARCH() to retrieve all matching metrics for every filesystem.
  # We also set widget-level "stat" and use 60s periods.
  efs_metrics_json = jsonencode([
    [
      { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\"TotalIOBytes\"', 'Sum', 60)",     "label": "EFS TotalIOBytes",      "id": "efs_total_io" }
    ],
    [
      { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\"ClientConnections\"', 'Average', 60)", "label": "EFS ClientConnections", "id": "efs_clients" }
    ],
    [
      { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\"PercentIOLimit\"', 'Average', 60)",    "label": "EFS PercentIOLimit",   "id": "efs_pct_io" }
    ],
    [
      { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\"BurstCreditBalance\"', 'Average', 60)", "label": "EFS BurstCreditBalance","id": "efs_burst" }
    ]
  ])

  # ---------- Dashboard JSON ----------
  # We explicitly set start window to last 24h to help ensure data appears.
  dashboard_body = <<-EOF
{
  "start": "-PT24H",
  "periodOverride": "inherit",
  "widgets": [
    {
      "type": "metric",
      "x": 0, "y": 0, "width": 24, "height": 6,
      "properties": {
        "metrics": ${local.ec2_metrics_json},
        "view": "gauge",
        "region": "${var.region}",
        "period": 60,
        "stat": "Average",
        "title": "EC2 - CPU/Mem/Disk (Gauge)",
        "yAxis": { "left": { "min": 0, "max": 100 } }
      }
    },
    {
      "type": "metric",
      "x": 0, "y": 7, "width": 24, "height": 6,
      "properties": {
        "metrics": ${local.lambda_metrics_json},
        "view": "timeSeries",
        "region": "${var.region}",
        "period": 60,
        "stat": "Sum",
        "title": "Lambda - Invocations/Errors/Throttles/Duration/Concurrent"
      }
    },
    {
      "type": "metric",
      "x": 0, "y": 21, "width": 24, "height": 6,
      "properties": {
        "metrics": ${local.ssm_metrics_json},
        "view": "timeSeries",
        "region": "${var.region}",
        "period": 60,
        "stat": "Sum",
        "title": "SSM RunCommand - Status"
      }
    },
    {
      "type": "metric",
      "x": 0, "y": 35, "width": 24, "height": 6,
      "properties": {
        "metrics": ${local.efs_metrics_json},
        "view": "timeSeries",
        "region": "${var.region}",
        "period": 60,
        "stat": "Average",
        "setPeriodToTimeRange": false,
        "title": "EFS - TotalIOBytes / ClientConnections / %IOLimit / Burst (all filesystems)"
      }
    }
  ]
}
EOF
}

resource "aws_cloudwatch_dashboard" "infra_health" {
  dashboard_name = "Infra-Health-Overview"
  dashboard_body = local.dashboard_body
}
