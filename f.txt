data "external" "ebs_volumes" {
  program = [
    "powershell.exe",
    "-NoProfile",
    "-Command",
    "$ErrorActionPreference='Stop'; $ids = aws ec2 describe-volumes --region ${var.region} --query \"Volumes[].VolumeId\" --output text; $csv = ($ids -split '\\s+') -join ','; if (-not $csv) { $csv = '' }; Write-Output ('{\"ids_csv\":\"' + $csv + '\"}')"
  ]
}


locals {
  # Read single string from external data; split to list of VolumeIds
  ebs_ids_csv  = try(data.external.ebs_volumes.result.ids_csv, "")
  ebs_ids_list = [
    for id in split(",", local.ebs_ids_csv) : trimspace(id)
    if length(trimspace(id)) > 0
  ]

  # Token map for metric-math ids (remove dashes)
  ebs_id_token = { for id in local.ebs_ids_list : id => replace(id, "-", "") }

  # For each volume, create hidden inputs + expressions:
  #   rl_<t> = Sum(VolumeTotalReadTime)/Sum(VolumeReadOps)   -> Avg Read Latency (seconds)
  #   te_<t> = Average(VolumeThroughputPercentage) > 100     -> Throughput Exceeded (1/0)
  ebs_latency_tp_metrics = flatten([
    for vol in local.ebs_ids_list : [
      [
        "AWS/EBS", "VolumeTotalReadTime", "VolumeId", vol,
        { "id": "rt_${local.ebs_id_token[vol]}", "stat": "Sum", "period": 300, "visible": false }
      ],
      [
        "AWS/EBS", "VolumeReadOps", "VolumeId", vol,
        { "id": "ro_${local.ebs_id_token[vol]}", "stat": "Sum", "period": 300, "visible": false }
      ],
      [
        "AWS/EBS", "VolumeThroughputPercentage", "VolumeId", vol,
        { "id": "tp_${local.ebs_id_token[vol]}", "stat": "Average", "period": 300, "visible": false }
      ],
      [
        { "expression": "rt_${local.ebs_id_token[vol]}/ro_${local.ebs_id_token[vol]}",
          "id": "rl_${local.ebs_id_token[vol]}",
          "label": "${vol} - VolumeAvgReadLatency (s)" }
      ],
      [
        { "expression": "tp_${local.ebs_id_token[vol]}>100",
          "id": "te_${local.ebs_id_token[vol]}",
          "label": "${vol} - VolumeThroughputExceededCheck" }
      ]
    ]
  ])

  # String to inject into local.final JSON
  ebs_metrics_string = jsonencode(local.ebs_latency_tp_metrics)
}
