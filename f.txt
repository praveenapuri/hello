#############################
# main.tf (strict-string metrics + ID validation)
#############################

terraform {
  backend "s3" {}
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 4.0"
    }
  }
}

#############################
# Inputs
#############################
variable "region" {
  type    = string
  default = "us-east-1"
}

variable "lambda_function_names" {
  type    = list(string)
  default = []
}

# EFS FileSystemIds
variable "efs_file_system_ids" {
  description = "EFS FileSystemIds (e.g., [\"fs-0123...\",\"fs-0456...\"])"
  type        = list(string)
  default     = []
  validation {
    condition     = alltrue([for id in var.efs_file_system_ids : can(regex("^fs-[0-9a-z-]+$", trimspace(id)))])
    error_message = "All EFS FileSystemIds must be non-empty strings like \"fs-xxxxxxxx\"."
  }
}

# FSx (Windows FS) FileSystemIds
variable "fsx_file_system_ids" {
  description = "FSx (Windows File Server) FileSystemIds"
  type        = list(string)
  default     = []
  validation {
    condition     = alltrue([for id in var.fsx_file_system_ids : can(regex("^fs-[0-9a-z-]+$", trimspace(id)))])
    error_message = "All FSx FileSystemIds must be non-empty strings like \"fs-xxxxxxxx\"."
  }
}

provider "aws" {
  region = var.region
}

#############################
# EC2 discovery
#############################
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

#############################
# Locals
#############################
locals {
  ###########################
  # EC2 metrics (gauge)
  ###########################
  ec2_instances = values(data.aws_instance.instance_details)

  # rows = strings only
  cpu_metrics = [
    for inst in local.ec2_instances : [
      "AWS/EC2", "CPUUtilization", "InstanceId", tostring(inst.id)
    ]
  ]
  mem_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "mem_used_percent", "InstanceId", tostring(inst.id)
    ]
  ]
  disk_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "disk_used_percent", "InstanceId", tostring(inst.id)
    ]
  ]
  ec2_all_metrics = concat(local.cpu_metrics, local.mem_metrics, local.disk_metrics)

  ###########################
  # Lambda metrics (time series) – strings only
  ###########################
  lambda_invocations = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Invocations", "FunctionName", tostring(fn)
    ]
  ]
  lambda_errors = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Errors", "FunctionName", tostring(fn)
    ]
  ]
  lambda_duration = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Duration", "FunctionName", tostring(fn)
    ]
  ]
  lambda_throttles = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Throttles", "FunctionName", tostring(fn)
    ]
  ]
  lambda_concurrent = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "ConcurrentExecutions", "FunctionName", tostring(fn)
    ]
  ]
  lambda_all_metrics = concat(local.lambda_invocations, local.lambda_errors, local.lambda_duration, local.lambda_throttles, local.lambda_concurrent)

  ###########################
  # SSM RunCommand (time series) – strings only
  ###########################
  ssm_metrics = [
    [ "AWS/SSM-RunCommand", "CommandsSucceeded" ],
    [ "AWS/SSM-RunCommand", "CommandsFailed" ],
    [ "AWS/SSM-RunCommand", "CommandsDeliveryTimedOut" ]
  ]

  ###########################
  # Clean & coerce IDs (avoid nulls/empties/non-strings)
  ###########################
  efs_ids_clean = [
    for id in var.efs_file_system_ids : tostring(trimspace(id))
    if length(trimspace(id)) > 0
  ]

  fsx_ids_clean = [
    for id in var.fsx_file_system_ids : tostring(trimspace(id))
    if length(trimspace(id)) > 0
  ]

  ###########################
  # EFS gauge (strings only rows)
  # Use native percent: PercentIOLimit (0–100)
  ###########################
  efs_all_metrics = flatten([
    for fs_id in local.efs_ids_clean : [
      [ "AWS/EFS", "PercentIOLimit", "FileSystemId", fs_id ]
    ]
  ])

  ###########################
  # FSx gauge (strings only rows) – Windows FS
  ###########################
  fsx_all_metrics = flatten([
    for fs_id in local.fsx_ids_clean : [
      [ "AWS/FSx", "StorageCapacityUtilization",          "FileSystemId", fs_id ],
      [ "AWS/FSx", "FileServerDiskThroughputUtilization", "FileSystemId", fs_id ]
    ]
  ])

  ###########################
  # Widgets (HCL objects)
  ###########################
  widgets = [
    # EC2 gauge
    {
      type   = "metric"
      x      = 0
      y      = 0
      width  = 24
      height = 6
      properties = {
        metrics = local.ec2_all_metrics
        view    = "gauge"
        region  = var.region
        period  = 300
        stat    = "Average"
        title   = "EC2 - CPU/Mem/Disk (%)"
        yAxis   = { left = { min = 0, max = 100 } }
      }
    },

    # Lambda time series
    {
      type   = "metric"
      x      = 0
      y      = 7
      width  = 24
      height = 6
      properties = {
        metrics = local.lambda_all_metrics
        view    = "timeSeries"
        region  = var.region
        period  = 300
        title   = "Lambda - Invocations/Errors/Duration/Throttles/Concurrent"
      }
    },

    # SSM time series
    {
      type   = "metric"
      x      = 0
      y      = 21
      width  = 24
      height = 6
      properties = {
        metrics = local.ssm_metrics
        view    = "timeSeries"
        region  = var.region
        period  = 60
        title   = "SSM RunCommand - Status"
      }
    },

    # EFS gauge
    {
      type   = "metric"
      x      = 0
      y      = 35
      width  = 24
      height = 6
      properties = {
        region  = var.region
        view    = "gauge"
        title   = "EFS - PercentIOLimit (%)"
        period  = 60
        stat    = "Average"
        yAxis   = { left = { min = 0, max = 100 } }
        metrics = local.efs_all_metrics
      }
    },

    # FSx gauge
    {
      type   = "metric"
      x      = 0
      y      = 42
      width  = 24
      height = 6
      properties = {
        region  = var.region
        view    = "gauge"
        title   = "FSx - StorageCapacityUtilization & FileServerDiskThroughputUtilization (%)"
        period  = 60
        stat    = "Average"
        yAxis   = { left = { min = 0, max = 100 } }
        metrics = local.fsx_all_metrics
      }
    }
  ]

  #############################
  # Final dashboard JSON
  #############################
  dashboard_body = jsonencode({
    start          = "-PT24H"
    periodOverride = "inherit"
    widgets        = local.widgets
  })
}

#############################
# Resource
#############################
resource "aws_cloudwatch_dashboard" "infra_health" {
  dashboard_name = "Infra-Health-Overview"
  dashboard_body = local.dashboard_body
}
