#############################
# main.tf
#############################

terraform {
  backend "s3" {}
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 4.0"
    }
  }
}

#############################
# Inputs
#############################
variable "region" {
  type    = string
  default = "us-east-1"
}

# Lambda functions you want charted (time series widget)
variable "lambda_function_names" {
  type    = list(string)
  default = []
}

# EFS: list your filesystem IDs here
variable "efs_file_system_ids" {
  description = "EFS FileSystemIds to chart (e.g., [\"fs-0123...\",\"fs-0456...\"])"
  type        = list(string)
  default     = []
}

# FSx (Windows File Server): list your filesystem IDs here
variable "fsx_file_system_ids" {
  description = "FSx (Windows FS) FileSystemIds to chart"
  type        = list(string)
  default     = []
}

provider "aws" {
  region = var.region
}

#############################
# EC2 discovery
#############################
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

#############################
# Locals
#############################
locals {
  ###########################
  # EC2 metrics (gauge)
  ###########################
  ec2_instances = values(data.aws_instance.instance_details)

  # Strict rows: only strings (namespace, metric, dimName, dimValue)
  cpu_metrics = [
    for inst in local.ec2_instances : [
      "AWS/EC2", "CPUUtilization", "InstanceId", inst.id
    ]
  ]
  mem_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "mem_used_percent", "InstanceId", inst.id
    ]
  ]
  disk_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "disk_used_percent", "InstanceId", inst.id
    ]
  ]
  ec2_all_metrics = concat(local.cpu_metrics, local.mem_metrics, local.disk_metrics)

  ###########################
  # Lambda metrics (time series)
  ###########################
  lambda_invocations = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Invocations", "FunctionName", fn
    ]
  ]
  lambda_errors = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Errors", "FunctionName", fn
    ]
  ]
  lambda_duration = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Duration", "FunctionName", fn
    ]
  ]
  lambda_throttles = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Throttles", "FunctionName", fn
    ]
  ]
  lambda_concurrent = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "ConcurrentExecutions", "FunctionName", fn
    ]
  ]
  lambda_all_metrics = concat(local.lambda_invocations, local.lambda_errors, local.lambda_duration, local.lambda_throttles, local.lambda_concurrent)

  ###########################
  # SSM RunCommand (time series)
  ###########################
  ssm_metrics = [
    [ "AWS/SSM-RunCommand", "CommandsSucceeded" ],
    [ "AWS/SSM-RunCommand", "CommandsFailed" ],
    [ "AWS/SSM-RunCommand", "CommandsDeliveryTimedOut" ]
  ]

  ###########################
  # EFS gauge (single window, strict rows)
  # No expressions; show native EFS metrics that fit a gauge cleanly:
  #  - PercentIOLimit (percentage 0–100)
  ###########################
  efs_ids = var.efs_file_system_ids

  # If you also want StorageBytes, add rows here, but note: a gauge with 0–100 yAxis won’t suit raw bytes.
  efs_gauge_metrics = flatten([
    for fs_id in local.efs_ids : [
      [ "AWS/EFS", "PercentIOLimit", "FileSystemId", fs_id ]
    ]
  ])

  ###########################
  # FSx (Windows FS) gauge (single window, strict rows)
  # Native % metrics (0–100) so they fit gauges well.
  ###########################
  fsx_ids = var.fsx_file_system_ids

  fsx_gauge_metrics = flatten([
    for fs_id in local.fsx_ids : [
      [ "AWS/FSx", "StorageCapacityUtilization",          "FileSystemId", fs_id ],
      [ "AWS/FSx", "FileServerDiskThroughputUtilization", "FileSystemId", fs_id ]
    ]
  ])

  ###########################
  # Widgets (native HCL objects)
  ###########################
  widgets = [
    # EC2 gauge (already working for you)
    {
      type   = "metric"
      x      = 0
      y      = 0
      width  = 24
      height = 6
      properties = {
        metrics = local.ec2_all_metrics
        view    = "gauge"
        region  = var.region
        period  = 300
        stat    = "Average"
        title   = "EC2-Health"
        yAxis   = { left = { min = 0, max = 100 } }
      }
    },

    # Lambda time series
    {
      type   = "metric"
      x      = 0
      y      = 7
      width  = 24
      height = 6
      properties = {
        metrics = local.lambda_all_metrics
        view    = "timeSeries"
        region  = var.region
        period  = 300
        title   = "Lambda-Health"
      }
    },

    # SSM time series
    {
      type   = "metric"
      x      = 0
      y      = 21
      width  = 24
      height = 6
      properties = {
        metrics = local.ssm_metrics
        view    = "timeSeries"
        region  = var.region
        period  = 60
        title   = "SSM RunCommand Health"
      }
    },

    # EFS gauge (single window)
    {
      type   = "metric"
      x      = 0
      y      = 35
      width  = 24
      height = 6
      properties = {
        region  = var.region
        view    = "gauge"
        title   = "EFS - PercentIOLimit (%)"
        period  = 60
        stat    = "Average"
        # Percent metric → 0..100 axis
        yAxis   = { left = { min = 0, max = 100 } }
        metrics = local.efs_gauge_metrics
      }
    },

    # FSx gauge (single window)
    {
      type   = "metric"
      x      = 0
      y      = 42
      width  = 24
      height = 6
      properties = {
        region  = var.region
        view    = "gauge"
        title   = "FSx - StorageCapacityUtilization & FileServerDiskThroughputUtilization (%)"
        period  = 60
        stat    = "Average"
        # Both metrics are percentages → 0..100 axis
        yAxis   = { left = { min = 0, max = 100 } }
        metrics = local.fsx_gauge_metrics
      }
    }
  ]

  #############################
  # Final dashboard JSON
  #############################
  dashboard_body = jsonencode({
    start          = "-PT24H"
    periodOverride = "inherit"
    widgets        = local.widgets
  })
}

#############################
# Resource
#############################
resource "aws_cloudwatch_dashboard" "infra_health" {
  dashboard_name = "Infra-Health-Overview"
  dashboard_body = local.dashboard_body
}
