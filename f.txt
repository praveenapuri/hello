# main.tf

terraform {
  backend "s3" {}
}

##############################################
# If not already defined elsewhere:
##############################################
variable "region" {
  type    = string
  default = "us-east-1"
}

variable "lambda_function_names" {
  type    = list(string)
  default = []
}

# Choose the “capacity” you care about for the storage utilization gauge (EFS is elastic).
# Example default = 10 TiB
variable "efs_target_capacity_bytes" {
  description = "Target capacity (bytes) for EFS StorageCapacityUtilization%."
  type        = number
  default     = 10995116277760
}

##############################################
# EC2 instances discovery
##############################################
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

##############################################
# Locals
##############################################
locals {
  # ------------------- EC2 metrics -------------------
  ec2_instances = values(data.aws_instance.instance_details)

  cpu_metrics = [
    for inst in local.ec2_instances : [
      "AWS/EC2", "CPUUtilization", "InstanceId", inst.id,
      { "label" : "CPU - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]
  mem_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "mem_used_percent", "InstanceId", inst.id,
      { "label" : "%MEM - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]
  disk_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "disk_used_percent", "InstanceId", inst.id,
      { "label": "%Disk - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]
  ec2_all_metrics  = concat(local.cpu_metrics, local.mem_metrics, local.disk_metrics)
  ec2_metrics_json = jsonencode(local.ec2_all_metrics)

  # ------------------- Lambda metrics -------------------
  lambda_invocations = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Invocations", "FunctionName", fn, { "label": "Invocations - ${fn}" }
    ]
  ]
  lambda_errors = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Errors", "FunctionName", fn, { "label": "Errors - ${fn}" }
    ]
  ]
  lambda_duration = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Duration", "FunctionName", fn, { "label": "Duration - ${fn}" }
    ]
  ]
  lambda_throttles = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Throttles", "FunctionName", fn, { "label": "Throttles - ${fn}" }
    ]
  ]
  lambda_concurrent = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "ConcurrentExecutions", "FunctionName", fn, { "label": "Concurrent - ${fn}" }
    ]
  ]
  lambda_all_metrics  = concat(local.lambda_invocations, local.lambda_errors, local.lambda_duration, local.lambda_throttles, local.lambda_concurrent)
  lambda_metrics_json = jsonencode(local.lambda_all_metrics)

  # ------------------- SSM Run Command -------------------
  ssm_metrics = [
    [ "AWS/SSM-RunCommand", "CommandsSucceeded",        { "label": "SSM Commands Succeeded" } ],
    [ "AWS/SSM-RunCommand", "CommandsFailed",           { "label": "SSM Commands Failed" } ],
    [ "AWS/SSM-RunCommand", "CommandsDeliveryTimedOut", { "label": "SSM Commands DeliveryTimedOut" } ]
  ]
  ssm_metrics_json = jsonencode(local.ssm_metrics)

  # ------------------- Dashboard JSON -------------------
  dashboard_body = <<-EOF
{
  "start": "-PT24H",
  "periodOverride": "inherit",
  "widgets": [
    {
      "type": "metric",
      "x": 0, "y": 0, "width": 24, "height": 6,
      "properties": {
        "metrics": ${local.ec2_metrics_json},
        "view": "gauge",
        "region": "${var.region}",
        "period": 300,
        "stat": "Average",
        "title": "EC2-Health",
        "yAxis": { "left": { "min": 0, "max": 100 } }   // required for gauge view
      }
    },
    {
      "type": "metric",
      "x": 0, "y": 7, "width": 24, "height": 6,
      "properties": {
        "metrics": ${local.lambda_metrics_json},
        "view": "timeSeries",
        "region": "${var.region}",
        "period": 300,
        "title": "Lambda-Health"
      }
    },
    {
      "type": "metric",
      "x": 0, "y": 21, "width": 24, "height": 6,
      "properties": {
        "metrics": ${local.ssm_metrics_json},
        "view": "timeSeries",
        "region": "${var.region}",
        "period": 60,
        "title": "SSM RunCommand Health"
      }
    },

    // ---------------- EFS single-window G A U G E (two metrics) ----------------
    {
      "type": "metric",
      "x": 0, "y": 35, "width": 24, "height": 6,
      "properties": {
        "region": "${var.region}",
        "view": "gauge",
        "title": "EFS - StorageCapacityUtilization & FileServerDiskThroughputUtilization (%)",
        "period": 60,
        "stat": "Average",
        "yAxis": { "left": { "min": 0, "max": 100 } },

        "metrics": [
          // ---- Throughput Utilization = ((MeteredIOBytes sum per 60s)/60)/PermittedThroughput avg * 100
          [ { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\\\"MeteredIOBytes\\\"', 'Sum', 60)",     "id": "m_metered", "label": "{{FileSystemId}}-MeteredIOBytes" } ],
          [ { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\\\"PermittedThroughput\\\"', 'Average', 60)", "id": "m_perm",    "label": "{{FileSystemId}}-PermittedThroughput" } ],
          [ { "expression": "(m_metered/60)/m_perm*100", "id": "efs_tp_util", "label": "{{FileSystemId}}-FileServerDiskThroughputUtilization" } ],

          // ---- Storage Utilization = StorageBytes / target * 100  (use 5-min period)
          [ { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\\\"StorageBytes\\\"', 'Average', 300)", "id": "m_storage", "label": "{{FileSystemId}}-StorageBytes" } ],
          [ { "expression": "m_storage / ${var.efs_target_capacity_bytes} * 100", "id": "efs_storage_util", "label": "{{FileSystemId}}-StorageCapacityUtilization" } ]
        ]
      }
    }
    // ---------------- end EFS gauge ----------------
  ]
}
EOF
}

##############################################
# Dashboard resource
##############################################
resource "aws_cloudwatch_dashboard" "infra_health" {
  dashboard_name = "Infra-Health-Overview"
  dashboard_body = local.dashboard_body
}
