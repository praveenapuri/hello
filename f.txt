# -------------------------------
# User-tunable target capacity
# -------------------------------
variable "efs_target_capacity_bytes" {
  description = "Target capacity (bytes) to compute storage utilization % for EFS."
  type        = number
  # example: 10 TiB
  default     = 10995116277760
}

# -------------------------------
# EFS Gauge Widgets (no IDs)
# -------------------------------
locals {
  # ---- 1) Throughput Utilization (%) ----
  # m1 = Metered IO bytes per 1-min period (Sum); convert to bytes/sec by /60
  # m2 = PermittedThroughput (Average, already bytes/sec)
  # util = ( (m1/60) / m2 ) * 100
  efs_throughput_util_gauge = {
    "type"  : "metric",
    "x"     : 0,
    "y"     : 42,
    "width" : 12,
    "height": 6,
    "properties" : {
      "region"  : var.region,
      "view"    : "gauge",
      "title"   : "EFS - Throughput Utilization (%)",
      "period"  : 60,
      "stat"    : "Average",
      "yAxis"   : { "left": { "min": 0, "max": 100 } },
      "metrics" : [
        [
          { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\"MeteredIOBytes\"', 'Sum', 60)", "id": "m_metered", "label": "MeteredIOBytesSum" }
        ],
        [
          { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\"PermittedThroughput\"', 'Average', 60)", "id": "m_perm", "label": "PermittedThroughputAvg" }
        ],
        [
          { "expression": "(m_metered/60)/m_perm*100", "label": "Throughput Utilization %", "id": "m_util_pct" }
        ]
      ]
    }
  }

  # ---- 2) Storage Utilization (%) vs a target capacity ----
  # sb = StorageBytes (Average). Compute % of target_capacity_bytes.
  # util = ( sb / var.efs_target_capacity_bytes ) * 100
  efs_storage_util_gauge = {
    "type"  : "metric",
    "x"     : 12,
    "y"     : 42,
    "width" : 12,
    "height": 6,
    "properties" : {
      "region"  : var.region,
      "view"    : "gauge",
      "title"   : "EFS - Storage Utilization (%)",
      "period"  : 300,
      "stat"    : "Average",
      "yAxis"   : { "left": { "min": 0, "max": 100 } },
      "metrics" : [
        [
          { "expression": "SEARCH('{AWS/EFS,FileSystemId} MetricName=\"StorageBytes\"', 'Average', 300)", "id": "m_storage", "label": "StorageBytesAvg" }
        ],
        [
          { "expression": "m_storage / ${var.efs_target_capacity_bytes} * 100", "label": "Storage Utilization %", "id": "m_store_pct" }
        ]
      ]
    }
  }

  # If you already build a widgets array, just concat these:
  # widgets = concat(local.widgets, [local.efs_throughput_util_gauge, local.efs_storage_util_gauge])

  # Or, if you build the whole dashboard body here, add them into the JSON.
}

# Example: assembling into dashboard body (adapt if you already have one)
locals {
  dashboard_body = jsonencode({
    start          = "-PT24H"
    periodOverride = "inherit"
    widgets        = concat(
      [
        # ...your existing widgets here...
      ],
      [
        local.efs_throughput_util_gauge,
        local.efs_storage_util_gauge
      ]
    )
  })
}

resource "aws_cloudwatch_dashboard" "infra_health" {
  dashboard_name = "Infra-Health-Overview"
  dashboard_body = local.dashboard_body
}
