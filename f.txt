# Variables expected:
# variable "region" { type = string }
# variable "efs_file_system_ids" { type = list(string) }
# variable "fsx_file_system_ids" { type = list(string) }

locals {
  # --- Clean ID lists (strings only; trim empties) ---
  efs_ids_clean = [
    for id in var.efs_file_system_ids : trimspace(id)
    if length(trimspace(id)) > 0
  ]

  fsx_ids_clean = [
    for id in var.fsx_file_system_ids : trimspace(id)
    if length(trimspace(id)) > 0
  ]

  # --- EFS GAUGE (rows = strings only + trailing renderer object) ---
  # Use a native % metric that works in gauge: PercentIOLimit
  efs_metrics = [
    for fs_id in local.efs_ids_clean : [
      "AWS/EFS", "PercentIOLimit", "FileSystemId", fs_id,
      { stat = "Average", period = 60 }
    ]
  ]

  # --- FSx GAUGE (Windows FS) ---
  # Two native % metrics per filesystem; each row ends with renderer object
  fsx_metrics = flatten([
    for fs_id in local.fsx_ids_clean : [
      [
        "AWS/FSx", "StorageCapacityUtilization", "FileSystemId", fs_id,
        { stat = "Average", period = 60 }
      ],
      [
        "AWS/FSx", "FileServerDiskThroughputUtilization", "FileSystemId", fs_id,
        { stat = "Average", period = 60 }
      ]
    ]
  ])

  # --- Widgets (drop into your widgets array) ---
  efs_gauge_widget = {
    type   = "metric"
    x      = 0
    y      = 0
    width  = 24
    height = 6
    properties = {
      region  = var.region
      view    = "gauge"
      title   = "EFS - PercentIOLimit (%)"
      period  = 60
      stat    = "Average"
      yAxis   = { left = { min = 0, max = 100 } }
      metrics = local.efs_metrics
    }
  }

  fsx_gauge_widget = {
    type   = "metric"
    x      = 0
    y      = 7
    width  = 24
    height = 6
    properties = {
      region  = var.region
      view    = "gauge"
      title   = "FSx - StorageCapacityUtilization & FileServerDiskThroughputUtilization (%)"
      period  = 60
      stat    = "Average"
      yAxis   = { left = { min = 0, max = 100 } }
      metrics = local.fsx_metrics
    }
  }
}

# If you build the dashboard from a widgets list, include:
# widgets = concat(
#   [
#     # ...your existing widgets...
#   ],
#   [
#     local.efs_gauge_widget,
#     local.fsx_gauge_widget
#   ]
# )
#
# And then:
# dashboard_body = jsonencode({
#   start          = "-PT24H"
#   periodOverride = "inherit"
#   widgets        = local.widgets
# })
