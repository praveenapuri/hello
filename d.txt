# -----------------------------------------------------------------------------
# main.tf
# -----------------------------------------------------------------------------
# This is the core file that defines the infrastructure resources.
# -----------------------------------------------------------------------------

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-east-1" # Or your primary region
}

# Look up the Hosted Zone ID for the domain.
# This makes the configuration reusable for any domain.
data "aws_route53_zone" "selected" {
  name = var.domain_name
}

# --- A Records ---
# This single resource block handles all A-records, including standard IP-based
# records and ALIAS records pointing to AWS resources like ALBs/NLBs.
resource "aws_route53_record" "a_records" {
  for_each = local.final_a_records

  zone_id = data.aws_route53_zone.selected.zone_id
  name    = each.value.name
  type    = "A"

  # If the record value is an AWS resource, create an ALIAS record.
  # Otherwise, create a standard A record with an IP address.
  dynamic "alias" {
    # The condition checks if the record value contains 'amazonaws.com'.
    for_each = contains(keys(each.value), "record") && strcontains(each.value.record, "amazonaws.com") ? [1] : []
    content {
      name                   = each.value.record
      # This assumes the ELB/NLB is in the same Hosted Zone. Adjust if needed.
      # For public ALBs, you might need a separate data source to look up their zone IDs.
      # For simplicity, we use the main zone ID here, which works for internal resources.
      zone_id                = data.aws_route53_zone.selected.zone_id 
      evaluate_target_health = true
    }
  }

  # If the record is not an alias (i.e., it's an IP address), set the records attribute.
  records = !strcontains(each.value.record, "amazonaws.com") ? [each.value.record] : null
  ttl     = 300
}


# --- CNAME Records ---
resource "aws_route53_record" "cname_records" {
  for_each = local.prod_cname_map

  zone_id = data.aws_route53_zone.selected.zone_id
  name    = each.value.name
  type    = "CNAME"
  ttl     = 300
  records = [each.value.record]
}

# --- NS Records ---
resource "aws_route53_record" "ns_records" {
  for_each = local.ns_map

  zone_id = data.aws_route53_zone.selected.zone_id
  name    = each.value.name
  type    = "NS"
  ttl     = 172800
  # The record string contains multiple space-separated values.
  # We need to split them into a list of strings for Terraform.
  records = split(" ", each.value.record)
}

# --- SOA Record ---
resource "aws_route53_record" "soa_record" {
  for_each = local.soa_map

  zone_id = data.aws_route53_zone.selected.zone_id
  name    = each.value.name
  type    = "SOA"
  ttl     = 900
  records = [each.value.record]
}
