#############################
# main.tf
#############################

terraform {
  backend "s3" {}
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 4.0"
    }
  }
}

#############################
# Inputs
#############################
variable "region" {
  type    = string
  default = "us-east-1"
}

# Lambda functions you want charted (time series widget)
variable "lambda_function_names" {
  type    = list(string)
  default = []
}

# EFS: list your filesystem IDs here
variable "efs_file_system_ids" {
  description = "EFS FileSystemIds to chart (e.g., [\"fs-0123...\",\"fs-0456...\"])"
  type        = list(string)
  default     = []
}

# EFS is elastic; pick a planning capacity to compute Storage % (e.g., 10 TiB)
variable "efs_target_capacity_bytes" {
  description = "Target capacity (bytes) to compute EFS storage utilization %."
  type        = number
  default     = 10995116277760
}

# FSx (Windows File Server): list your filesystem IDs here
variable "fsx_file_system_ids" {
  description = "FSx FileSystemIds to chart (Windows FS)"
  type        = list(string)
  default     = []
}

provider "aws" {
  region = var.region
}

#############################
# EC2 discovery
#############################
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

#############################
# Locals
#############################
locals {
  ###########################
  # EC2 metrics (gauge)
  ###########################
  ec2_instances = values(data.aws_instance.instance_details)

  cpu_metrics = [
    for inst in local.ec2_instances : [
      "AWS/EC2", "CPUUtilization", "InstanceId", inst.id,
      { label : "CPU - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]

  mem_metrics = [
    for inst in local.ec2_instances : [
