# 4. The SSM Command Document
resource "aws_ssm_document" "route53_backup_doc" {
  name            = "Backup-Route53-To-S3-Restorable-Single-Folder"
  document_type   = "Command"
  document_format = "JSON"

  content = <<-EOT
    {
      "schemaVersion": "2.2",
      "description": "Backs up all Route 53 hosted zone records to the S3 bucket ${data.aws_s3_bucket.route53_backups.bucket} in a restorable format.",
      "parameters": {},
      "mainSteps": [
        {
          "action": "aws:runShellScript",
          "name": "backupRoute53",
          "inputs": {
            "runCommand": [
              "#!/bin/sh",
              "set -e",
              "",
              "S3_BUCKET_NAME=\"${data.aws_s3_bucket.route53_backups.bucket}\"",
              "S3_FOLDER=\"route53-backups\"",
              "",
              "# Check for jq and install if not present",
              "if ! type jq >/dev/null 2>&1; then",
              "    echo 'jq not found. Attempting to install...'",
              "    if [ -f /etc/redhat-release ]; then",
              "        sudo yum install -y jq",
              "    elif [ -f /etc/lsb-release ]; then",
              "        sudo apt-get update && sudo apt-get install -y jq",
              "    else",
              "        echo 'Unsupported OS for automatic jq installation. Please install jq manually.' >&2",
              "        exit 1",
              "    fi",
              "fi",
              "",
              "# Use IMDSv2 to get the region securely",
              "TOKEN=`curl -s -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`",
              "REGION=`curl -s -H \"X-aws-ec2-metadata-token: $$TOKEN\" \"http://169.254.169.254/latest/meta-data/placement/region\"`",
              "",
              "BACKUP_DIR=\"/tmp/route53-backup-$$$$`",
              "mkdir -p \"$$BACKUP_DIR\"",
              "",
              "HOSTED_ZONES_DATA=`aws route53 list-hosted-zones --query 'HostedZones[].[Id, Name]' --output text --region $$REGION`",
              "",
              "if [ -z \"$$HOSTED_ZONES_DATA\" ]; then",
              "    echo \"No hosted zones found.\"",
              "    exit 0",
              "fi",
              "",
              "echo \"$$HOSTED_ZONES_DATA\" | while read -r ZONE_ID ZONE_NAME; do",
              "    TIMESTAMP=`date +%Y-%m-%d-%H%M%S`",
              "    FILENAME_BASE=`echo \"$$ZONE_NAME\" | sed 's/\\\\.$//' | tr '.' '_'`",
              "    FILENAME=\"$${FILENAME_BASE}_$${TIMESTAMP}.json\"",
              "    RAW_RECORDS_FILE=\"$$BACKUP_DIR/$${FILENAME_BASE}-raw.json\"",
              "    BACKUP_FILE_PATH=\"$$BACKUP_DIR/$$FILENAME\"",
              "",
              "    echo \"Backing up zone: $$ZONE_NAME ($$ZONE_ID) to file $$FILENAME\"",
              "    aws route53 list-resource-record-sets --hosted-zone-id \"$$ZONE_ID\" --region $$REGION > \"$$RAW_RECORDS_FILE\"",
              "",
              "    # Use jq to transform the records into a restorable format",
              "    jq --arg zone_name \"$$ZONE_NAME\" --arg timestamp \"$$TIMESTAMP\" '{ \"Comment\": (\"Restore from backup \" + $$timestamp + \" for \" + $$zone_name), \"Changes\": .ResourceRecordSets | map(select(.Name == $$zone_name and (.Type == \\\"NS\\\" or .Type == \\\"SOA\\\") | not)) | map({ \"Action\": \"UPSERT\", \"ResourceRecordSet\": . }) }' \"$$RAW_RECORDS_FILE\" > \"$$BACKUP_FILE_PATH\"",
              "",
              "    S3_KEY=\"$$S3_FOLDER/$$FILENAME\"",
              "    echo \"Uploading to s3://$$S3_BUCKET_NAME/$$S3_KEY\"",
              "    aws s3 cp \"$$BACKUP_FILE_PATH\" \"s3://$$S3_BUCKET_NAME/$$S3_KEY\" --region $$REGION",
              "done",
              "",
              "echo \"Cleaning up temporary directory: $$BACKUP_DIR\"",
              "rm -rf \"$$BACKUP_DIR\"",
              "",
              "echo \"Route 53 backup complete.\""
            ]
          }
        }
      ]
    }
    EOT
}
