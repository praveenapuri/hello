terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 4.0"
    }
  }
  backend "s3" {}
}

provider "aws" {
  region = var.region
}

# -----------------------
# EC2 instances discovery
# -----------------------
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

# -----------------------
# EBS volumes discovery attached to discovered EC2 instances
# -----------------------
data "aws_ebs_volumes" "attached" {
  filter {
    name   = "attachment.instance-id"
    values = data.aws_instances.monitored_instances.ids
  }
}

data "aws_ebs_volume" "volumes" {
  for_each  = toset(try(data.aws_ebs_volumes.attached.ids, []))
  volume_id = each.key
}

# -----------------------
# Variables
# -----------------------
variable "region" {
  description = "AWS region"
  type        = string
}

variable "lambda_function_names" {
  type        = list(string)
  default     = []
}

variable "efs_file_system_ids" {
  type        = list(string)
  default     = []
}

variable "fsx_file_system_ids" {
  type        = list(string)
  default     = []
}

variable "nlb_names" {
  type        = list(string)
  default     = []
}

variable "alb_names" {
  type        = list(string)
  default     = []
}

variable "alb_targetgroup_arns" {
  description = "List of TargetGroup ARNs for ALB TargetGroup metrics"
  type        = list(string)
  default     = []
}

# -----------------------
# Locals: metrics
# -----------------------
locals {
  # -------------------
  # EC2 metrics
  ec2_instances = values(data.aws_instance.instance_details)

  cpu_metrics = [
    for inst in local.ec2_instances : [
      "AWS/EC2", "CPUUtilization", "InstanceId", inst.id,
      { "label" : "CPU - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]
  mem_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "mem_used_percent", "InstanceId", inst.id,
      { "label" : "%MEM - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]
  disk_metrics = [
    for inst in local.ec2_instances : [
      "CWAgent", "disk_used_percent", "InstanceId", inst.id,
      { "label": "%Disk - ${coalesce(inst.tags.Name, inst.id)}" }
    ]
  ]
  ec2_all_metrics = concat(local.cpu_metrics, local.mem_metrics, local.disk_metrics)
  ec2_metrics_json = jsonencode(local.ec2_all_metrics)

  # -------------------
  # Lambda metrics
  lambda_invocations = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Invocations", "FunctionName", fn, { "label": "Invocations - ${fn}" }
    ]
  ]
  lambda_errors = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Errors", "FunctionName", fn, { "label": "Errors - ${fn}" }
    ]
  ]
  lambda_duration = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Duration", "FunctionName", fn, { "label": "Duration - ${fn}" }
    ]
  ]
  lambda_throttles = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "Throttles", "FunctionName", fn, { "label": "Throttles - ${fn}" }
    ]
  ]
  lambda_concurrent = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda", "ConcurrentExecutions", "FunctionName", fn, { "label": "Concurrent - ${fn}" }
    ]
  ]
  lambda_all_metrics = concat(local.lambda_invocations, local.lambda_errors, local.lambda_duration, local.lambda_throttles, local.lambda_concurrent)
  lambda_metrics_json = jsonencode(local.lambda_all_metrics)

  # -------------------
  # EBS metrics
  ebs_volumes = values(data.aws_ebs_volume.volumes)

  ebs_read_ops = [
    for v in local.ebs_volumes : [ "AWS/EBS", "VolumeReadOps", "VolumeId", v.id, { "label": "ReadOps - ${v.id}" } ]
  ]
  ebs_write_ops = [
    for v in local.ebs_volumes : [ "AWS/EBS", "VolumeWriteOps", "VolumeId", v.id, { "label": "WriteOps - ${v.id}" } ]
  ]
  ebs_queue_length = [
    for v in local.ebs_volumes : [ "AWS/EBS", "VolumeQueueLength", "VolumeId", v.id, { "label": "QueueLen - ${v.id}" } ]
  ]
  ebs_burst_balance = [
    for v in local.ebs_volumes : [ "AWS/EBS", "BurstBalance", "VolumeId", v.id, { "label": "BurstBal - ${v.id}" } ]
  ]
  ebs_all_metrics = concat(local
