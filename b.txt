# main.tf
terraform {
  backend "s3" {}
}

# Dynamically retrieve details of EC2 instances
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

# For each instance ID found, get its full details
data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

locals {
  # Define constants for the new layout
  widget_width     = 8
  widget_height    = 5
  widgets_in_a_row = 6 # 48 (total desired width) / 8 (widget width)

  # A list of all the individual metric widgets without position data
  metric_widgets = flatten([
    for instance in values(data.aws_instance.instance_details) : [
      # CPU Widget
      {
        type       = "metric",
        properties = {
          metrics = [["AWS/EC2", "CPUUtilization", "InstanceId", instance.id]],
          view    = "gauge",
          title   = "CPU - ${coalesce(instance.tags.Name, instance.id)}",
          region  = var.region,
          [cite_start]stat    = "Average" [cite: 4]
        }
      },
      # Memory Widget
      {
        type       = "metric",
        properties = {
          [cite_start]metrics = [["CWAgent", "mem_used_percent", "InstanceId", instance.id]][cite: 10],
          view    = "gauge",
          title   = "Memory - ${coalesce(instance.tags.Name, instance.id)}",
          region  = var.region,
          stat    = "Average"
        }
      },
      # Disk Widget
      {
        type       = "metric",
        properties = {
          metrics = [[
            "CWAgent", "disk_used_percent",
            "InstanceId", instance.id,
            [cite_start]"device", "nvme0n1p1"[cite: 17],
            "fstype", "xfs",
            "path", "/"
          ]],
          view    = "gauge",
          title   = "Disk - ${coalesce(instance.tags.Name, instance.id)}",
          region  = var.region,
          [cite_start]stat    = "Average" [cite: 18]
        }
      }
    ]
  ])

  # Final list of all widgets with their calculated grid positions
  all_widgets = [
    for index, widget in local.metric_widgets : {
      type   = widget.type,
      x      = (index % local.widgets_in_a_row) * local.widget_width,
      y      = floor(index / local.widgets_in_a_row) * local.widget_height,
      width  = local.widget_width,
      height = local.widget_height,
      properties = merge(widget.properties, {
        min = 0,
        max = 100
      })
    }
  ]
}

# Create a SINGLE CloudWatch Dashboard resource
resource "aws_cloudwatch_dashboard" "consolidated" {
  dashboard_name = "EPIC-Health1"

  dashboard_body = jsonencode({
    widgets = local.all_widgets
  })
}

# (Optional) Outputs
output "dashboard_name" {
  [cite_start]description = "The name of the consolidated CloudWatch dashboard." [cite: 24]
  [cite_start]value       = aws_cloudwatch_dashboard.consolidated.dashboard_name [cite: 24]
}

output "instances_found_for_dashboard" {
  [cite_start]description = "Map of instance IDs to their Name tags included in the dashboard." [cite: 25]
  [cite_start]value       = { for inst in data.aws_instance.instance_details : inst.id => coalesce(inst.tags.Name, "N/A") } [cite: 25]
}
