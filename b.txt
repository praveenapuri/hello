############################################
# main.tf
############################################
terraform {
  required_version = ">= 1.3.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.0"
    }
  }
  # backend "s3" {}  # <- keep/use your existing backend here if needed
}

provider "aws" {
  # region = "us-east-1"  # or set via env AWS_DEFAULT_REGION
}

# ------------------------------------------
# Discover EC2 instances (running/pending)
# ------------------------------------------
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

# ------------------------------------------
# Locals: OS split, per-instance metric lists
# ------------------------------------------
locals {
  # Friendly names for tiles
  name_of = {
    for inst in values(data.aws_instance.instance_details) :
    inst.id => try(inst.tags.Name, inst.id)
  }

  # Split by OS (platform = "windows" for Windows; empty/unknown for Linux)
  windows_ids = toset([
    for inst in values(data.aws_instance.instance_details) : inst.id
    if try(lower(inst.platform), "") == "windows"
  ])

  linux_ids = setsubtract(
    toset([for inst in values(data.aws_instance.instance_details) : inst.id]),
    local.windows_ids
  )

  # ---------------- CPU (EC2) ----------------
  cpu_linux = [
    for iid in local.linux_ids : [
      "AWS/EC2", "CPUUtilization", "InstanceId", iid,
      { label = "CPU % - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]

  cpu_windows = [
    for iid in local.windows_ids : [
      "AWS/EC2", "CPUUtilization", "InstanceId", iid,
      { label = "CPU % - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]

  # -------------- Memory Used % --------------
  mem_linux = [
    for iid in local.linux_ids : [
      "CWAgent", "mem_used_percent", "InstanceId", iid,
      { label = "Mem Used % - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]

  mem_windows = [
    for iid in local.windows_ids : [
      "CWAgent", "Memory % Committed Bytes In Use", "InstanceId", iid,
      { label = "Mem Used % - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]

  # --------------- Disk Used % ----------------
  # Linux: direct metric
  disk_linux = [
    for iid in local.linux_ids : [
      "CWAgent", "disk_used_percent", "InstanceId", iid,
      { label = "Disk Used % - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]

  # Windows: 100 - LogicalDisk % Free Space (expression per instance)
  disk_windows = flatten([
    for idx, iid in tolist(local.windows_ids) : [
      [
        "CWAgent", "LogicalDisk % Free Space", "InstanceId", iid,
        {
          id    = "wfree_${replace(iid, "-", "")}_${idx}"
          label = "Disk Free % - ${lookup(local.name_of, iid, iid)}"
          stat  = "Average"
          period = 300
        }
      ],
      [
        {
          expression = "100 - wfree_${replace(iid, "-", "")}_${idx}"
          id         = "wused_${replace(iid, "-", "")}_${idx}"
          label      = "Disk Used % - ${lookup(local.name_of, iid, iid)}"
          period     = 300
        }
      ]
    ]
  ])

  # ---------------- Compose windows ----------------
  metrics_linux   = concat(local.cpu_linux, local.mem_linux, local.disk_linux)
  metrics_windows = concat(local.cpu_windows, local.mem_windows, local.disk_windows)

  # ------------------------------------------
  # Paste ALL your existing non-EC2 widgets (unchanged) below as JSON objects.
  # Example: local.other_widgets = [
  #   { type = "metric", x = 0, y = 12, width = 24, height = 6, properties = { ... } },
  #   { type = "log",    x = 0, y = 18, width = 24, height = 6, properties = { ... } },
  # ]
  # ------------------------------------------
  other_widgets = [
    # <<< PASTE YOUR EXISTING "other resource windows" HERE (unchanged) >>>
  ]

  # Final dashboard JSON
  dashboard_obj = {
    widgets = concat([
      # Window 1: Linux
      {
        "type"       = "metric",
        "x"          = 0,
        "y"          = 0,
        "width"      = 24,
        "height"     = 6,
        "properties" = {
          "title"   = "EC2 – Linux Instances (CPU, Mem Used %, Disk Used %)",
          "region"  = data.aws_region.current.name,
          "view"    = "singleValue",
          "period"  = 300,
          "stat"    = "Average",
          "yAxis"   = { "left" = { "min" = 0, "max" = 100 } },
          "metrics" = local.metrics_linux,
          "annotations" = {
            "horizontal" = [
              { "label" = "75% Used Threshold", "value" = 75, "color" = "#d13212", "fill" = "above" }
            ]
          }
        }
      },

      # Window 2: Windows
      {
        "type"       = "metric",
        "x"          = 0,
        "y"          = 6,
        "width"      = 24,
        "height"     = 6,
        "properties" = {
          "title"   = "EC2 – Windows Instances (CPU, Mem Used %, Disk Used %)",
          "region"  = data.aws_region.current.name,
          "view"    = "singleValue",
          "period"  = 300,
          "stat"    = "Average",
          "yAxis"   = { "left" = { "min" = 0, "max" = 100 } },
          "metrics" = local.metrics_windows,
          "annotations" = {
            "horizontal" = [
              { "label" = "75% Used Threshold", "value" = 75, "color" = "#d13212", "fill" = "above" }
            ]
          }
        }
      }
    ], local.other_widgets)
  }
}

# Helper to get current region for widget properties
data "aws_region" "current" {}

# ------------------------------------------
# Dashboard resource
# ------------------------------------------
resource "aws_cloudwatch_dashboard" "ec2_os_health" {
  dashboard_name = "EC2-OS-Health"
  dashboard_body = jsonencode(local.dashboard_obj)
}
