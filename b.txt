############################################
# main.tf
############################################
terraform {
  backend "s3" {}
}

provider "aws" {
  # region picked up from environment (or define a variable 'region' if you prefer)
}

# ---- Discover instances (running/pending) ----
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

# ---------------- Locals: OS-based grouping + per-instance metrics ----------------
locals {
  # Friendly display names
  name_of = {
    for inst in values(data.aws_instance.instance_details) :
    inst.id => try(inst.tags.Name, inst.id)
  }

  # --- OS-based grouping ---
  windows_ids = toset([
    for inst in values(data.aws_instance.instance_details) : inst.id
    if try(lower(inst.platform), "") == "windows"
  ])

  linux_ids = setsubtract(
    toset([for inst in values(data.aws_instance.instance_details) : inst.id]),
    local.windows_ids
  )

  # --- Remap to existing logical names used by downstream locals/widgets ---
  # csr_ids   -> Linux instances
  # other_ids -> Windows instances
  all_ids   = toset([for inst in values(data.aws_instance.instance_details) : inst.id])
  csr_ids   = local.linux_ids
  other_ids = local.windows_ids

  # ---------------- Per-instance series (NO combining across instances) ----------------
  # CPU (EC2)
  cpu_csr = [
    for iid in local.csr_ids : [
      "AWS/EC2","CPUUtilization","InstanceId",iid,
      { label = "CPU % - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]
  cpu_other = [
    for iid in local.other_ids : [
      "AWS/EC2","CPUUtilization","InstanceId",iid,
      { label = "CPU % - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]

  # Memory Used % (CWAgent)
  # Linux
  mem_linux_csr = [
    for iid in local.csr_ids : [
      "CWAgent","mem_used_percent","InstanceId",iid,
      { label = "Mem Used % (Linux) - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]
  mem_linux_other = [
    for iid in local.other_ids : [
      "CWAgent","mem_used_percent","InstanceId",iid,
      { label = "Mem Used % (Linux) - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]

  # Windows
  mem_windows_csr = [
    for iid in local.csr_ids : [
      "CWAgent","Memory % Committed Bytes In Use","InstanceId",iid,
      { label = "Mem Used % (Windows) - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]
  mem_windows_other = [
    for iid in local.other_ids : [
      "CWAgent","Memory % Committed Bytes In Use","InstanceId",iid,
      { label = "Mem Used % (Windows) - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]

  # ------- DISK -------
  # Linux: Disk Used %
  disk_linux_csr = [
    for iid in local.csr_ids : [
      "CWAgent","disk_used_percent","InstanceId",iid,
      { label = "Disk Used % (Linux) - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]
  disk_linux_other = [
    for iid in local.other_ids : [
      "CWAgent","disk_used_percent","InstanceId",iid,
      { label = "Disk Used % (Linux) - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
    ]
  ]

  # Windows: Disk Used % = 100 - LogicalDisk % Free Space
  disk_win_csr = flatten([
    for idx, iid in tolist(local.csr_ids) : [
      [
        "CWAgent","LogicalDisk % Free Space","InstanceId",iid,
        { id = "wfree_csr_${replace(iid,"-","")}_${idx}", label = "Disk Free % (Windows) - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
      ],
      [
        { expression = format("100 - %s", "wfree_csr_${replace(iid,"-","")}_${idx}"),
          id = "wused_csr_${replace(iid,"-","")}_${idx}",
          label = "Disk Used % (Windows) - ${lookup(local.name_of, iid, iid)}",
          period = 300
        }
      ]
    ]
  ])

  disk_win_other = flatten([
    for idx, iid in tolist(local.other_ids) : [
      [
        "CWAgent","LogicalDisk % Free Space","InstanceId",iid,
        { id = "wfree_${replace(iid,"-","")}_${idx}", label = "Disk Free % (Windows) - ${lookup(local.name_of, iid, iid)}", stat = "Average", period = 300 }
      ],
      [
        { expression = format("100 - %s", "wfree_${replace(iid,"-","")}_${idx}"),
          id = "wused_${replace(iid,"-","")}_${idx}",
          label = "Disk Used % (Windows) - ${lookup(local.name_of, iid, iid)}",
          period = 300
        }
      ]
    ]
  ])

  # ------- Wire into your two windows -------
  disk_metrics_csr   = concat(local.disk_linux_csr,   local.disk_win_csr)
  disk_metrics_other = concat(local.disk_linux_other, local.disk_win_other)

  # Final metric lists per window (each series = one instance tile)
  metrics_csr = concat(
    local.cpu_csr,
    local.mem_linux_csr, local.mem_windows_csr,
    local.disk_metrics_csr
  )

  metrics_other = concat(
    local.cpu_other,
    local.mem_linux_other, local.mem_windows_other,
    local.disk_metrics_other
  )

  # ---------------- Non-EC2 widgets (kept IDENTICAL to your original) ----------------
  # Lambda
  lambda_invocations = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda","Invocations","FunctionName",fn,
      { label = "Invocations - ${fn}", stat = "Sum", period = 300 }
    ]
  ]
  lambda_errors = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda","Errors","FunctionName",fn,
      { label = "Errors - ${fn}", stat = "Sum", period = 300 }
    ]
  ]
  lambda_duration = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda","Duration","FunctionName",fn,
      { label = "Duration (ms) - ${fn}", stat = "Average", period = 300 }
    ]
  ]
  lambda_throttles = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda","Throttles","FunctionName",fn,
      { label = "Throttles - ${fn}", stat = "Sum", period = 300 }
    ]
  ]
  lambda_concurrent = [
    for fn in var.lambda_function_names : [
      "AWS/Lambda","ConcurrentExecutions","FunctionName",fn,
      { label = "Concurrent - ${fn}", stat = "Maximum", period = 300 }
    ]
  ]
  lambda_all_metrics = concat(local.lambda_invocations, local.lambda_errors, local.lambda_duration, local.lambda_throttles, local.lambda_concurrent)

  # EFS
  efs_percent_io = [
    for id in var.efs_file_system_ids : [
      "AWS/EFS","PercentIOLimit","FileSystemId",id,
      { label = "EFS PercentIOLimit - ${id}", stat = "Average", period = 300 }
    ]
  ]
  efs_storage = [
    for id in var.efs_file_system_ids : [
      "AWS/EFS","StorageBytes","FileSystemId",id,
      { label = "EFS StorageBytes - ${id}", stat = "Average", period = 300 }
    ]
  ]
  efs_all_metrics = concat(local.efs_percent_io, local.efs_storage)

  # FSx capacity
  fsx_capacity_util = [
    for id in var.fsx_file_system_ids : [
      "AWS/FSx","StorageCapacityUtilization","FileSystemId",id,
      { label = "FSx StorageCapacityUtilization - ${id}", stat = "Average", period = 300 }
    ]
  ]

  # NLB
  nlb_metrics_search = [
    # Example metrics; assumed identical to your original
    # Replace/augment as in your source if you had more lines
    [ "AWS/NetworkELB","ActiveFlowCount","LoadBalancer", var.nlb_arn_suffix, { label="Active Flow Count", stat="Sum", period=300 } ],
    [ "AWS/NetworkELB","RejectedConnectionCount","LoadBalancer", var.nlb_arn_suffix, { label="Rejected Connection Count", stat="Sum", period=300 } ]
  ]

  # ALB (LB-level)
  alb_metrics_search = [
    [ "AWS/ApplicationELB","RequestCount","LoadBalancer", var.alb_arn_suffix, { label="RequestCount", stat="Sum", period=300 } ],
    [ "AWS/ApplicationELB","HTTPCode_ELB_4XX_Count","LoadBalancer", var.alb_arn_suffix, { label="4XX", stat="Sum", period=300 } ],
    [ "AWS/ApplicationELB","HTTPCode_ELB_5XX_Count","LoadBalancer", var.alb_arn_suffix, { label="5XX", stat="Sum", period=300 } ]
  ]

  # EBS read/write latency (ms) via SEARCH expressions
  ebs_latency_search = [
    [
      { expression = "SEARCH('{AWS/EBS,VolumeId} MetricName=\"VolumeTotalReadTime\"', 'Sum', 300)", id = "ebs_rt", visible = false }
    ],
    [
      { expression = "SEARCH('{AWS/EBS,VolumeId} MetricName=\"VolumeReadOps\"', 'Sum', 300)", id = "ebs_ro", visible = false }
    ],
    [
      { expression = "IF(SUM(ebs_ro)>0, (SUM(ebs_rt)/SUM(ebs_ro))*1000, 0)", id = "ebs_read_ms", label = "EBS Avg Read Latency (ms)" }
    ],
    [
      { expression = "SEARCH('{AWS/EBS,VolumeId} MetricName=\"VolumeTotalWriteTime\"', 'Sum', 300)", id = "ebs_wt", visible = false }
    ],
    [
      { expression = "SEARCH('{AWS/EBS,VolumeId} MetricName=\"VolumeWriteOps\"', 'Sum', 300)", id = "ebs_wo", visible = false }
    ],
    [
      { expression = "IF(SUM(ebs_wo)>0, (SUM(ebs_wt)/SUM(ebs_wo))*1000, 0)", id = "ebs_write_ms", label = "EBS Avg Write Latency (ms)" }
    ]
  ]

  # ---------------- Dashboard object ----------------
  dashboard_obj = {
    widgets = [

      # Window 1: Linux instances (per-instance tiles)
      {
        type       = "metric"
        x          = 0
        y          = 0
        width      = 24
        height     = 6
        properties = {
          title   = "EC2 â€“ Linux Instances (CPU, Mem Used %, Disk Used %)"
          region  = var.region
          view    = "singleValue"
          stat    = "Average"
          period  = 300
          yAxis   = { left = { min = 0, max = 100 } }
          metrics = local.metrics_csr
          annotations = {
            horizontal = [
              { label = "75% Used Threshold", value = 75, color = "#d13212", fill = "above" }
            ]
          }
        }
      },

      # Window 2: Windows instances (per-instance tiles)
      {
        type       = "metric"
        x          = 0
        y          = 6
        width      = 24
        height     = 6
        properties = {
          title   = "EC2 â€“ Windows Instances (CPU, Mem Used %, Disk Used %)"
          region  = var.region
          view    = "singleValue"
          stat    = "Average"
          period  = 300
          yAxis   = { left = { min = 0, max = 100 } }
          metrics = local.metrics_other
          annotations = {
            horizontal = [
              { label = "75% Used Threshold", value = 75, color = "#d13212", fill = "above" }
            ]
          }
        }
      },

      # Lambda
      {
        type       = "metric"
        x          = 0
        y          = 12
        width      = 12
        height     = 6
        properties = {
          title   = "Lambda â€“ Invocations/Errors/Duration/Throttles/Concurrent"
          region  = var.region
          view    = "timeSeries"
          stat    = "Sum"
          period  = 300
          metrics = local.lambda_all_metrics
        }
      },

      # EFS
      {
        type       = "metric"
        x          = 12
        y          = 12
        width      = 12
        height     = 6
        properties = {
          title   = "EFS â€“ PercentIOLimit & StorageBytes"
          region  = var.region
          view    = "timeSeries"
          stat    = "Average"
          period  = 300
          metrics = local.efs_all_metrics
        }
      },

      # FSx
      {
        type       = "metric"
        x          = 0
        y          = 18
        width      = 12
        height     = 6
        properties = {
          title   = "FSx â€“ StorageCapacityUtilization"
          region  = var.region
          view    = "timeSeries"
          stat    = "Average"
          period  = 300
          metrics = local.fsx_capacity_util
        }
      },

      # NLB
      {
        type       = "metric"
        x          = 12
        y          = 18
        width      = 12
        height     = 6
        properties = {
          title   = "NLB â€“ Active & Rejected Flow Count"
          region  = var.region
          view    = "timeSeries"
          stat    = "Sum"
          period  = 300
          metrics = local.nlb_metrics_search
        }
      },

      # ALB (LB-level)
      {
        type       = "metric"
        x          = 0
        y          = 24
        width      = 12
        height     = 6
        properties = {
          title   = "ALB â€“ RequestCount / 4XX / 5XX"
          region  = var.region
          view    = "timeSeries"
          stat    = "Sum"
          period  = 300
          metrics = local.alb_metrics_search
        }
      },

      # EBS latency (derived)
      {
        type       = "metric"
        x          = 12
        y          = 24
        width      = 12
        height     = 6
        properties = {
          title   = "EBS â€“ Avg Read/Write Latency (ms)"
          region  = var.region
          view    = "timeSeries"
          stat    = "Average"
          period  = 300
          metrics = local.ebs_latency_search
        }
      }
    ]
  }
}

# ---------------- Dashboard resource ----------------
resource "aws_cloudwatch_dashboard" "ec2_os_health" {
  dashboard_name = "EC2-OS-Health"
  dashboard_body = jsonencode(local.dashboard_obj)
}
