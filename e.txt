locals {
  # Clean list of VolumeIds from variables
  ebs_ids_clean = [
    for id in var.ebs_volume_ids : trimspace(id)
    if length(trimspace(id)) > 0
  ]

  # Tokens for metric-math IDs (no dashes)
  ebs_id_token = { for id in local.ebs_ids_clean : id => replace(id, "-", "") }

  # Hidden inputs + expressions per volume
  ebs_latency_tp_metrics = flatten([
    for vol in local.ebs_ids_clean : [
      [
        "AWS/EBS", "VolumeTotalReadTime", "VolumeId", vol,
        { "id": "rt_${local.ebs_id_token[vol]}", "stat": "Sum", "period": 300, "visible": false }
      ],
      [
        "AWS/EBS", "VolumeReadOps", "VolumeId", vol,
        { "id": "ro_${local.ebs_id_token[vol]}", "stat": "Sum", "period": 300, "visible": false }
      ],
      [
        "AWS/EBS", "VolumeThroughputPercentage", "VolumeId", vol,
        { "id": "tp_${local.ebs_id_token[vol]}", "stat": "Average", "period": 300, "visible": false }
      ],
      [
        { "expression": "rt_${local.ebs_id_token[vol]}/ro_${local.ebs_id_token[vol]}",
          "id": "rl_${local.ebs_id_token[vol]}",
          "label": "${vol} - VolumeAvgReadLatency (s)" }
      ],
      [
        { "expression": "tp_${local.ebs_id_token[vol]}>100",
          "id": "te_${local.ebs_id_token[vol]}",
          "label": "${vol} - VolumeThroughputExceededCheck" }
      ]
    ]
  ])

  # String to inject into local.final JSON
  ebs_metrics_string = jsonencode(local.ebs_latency_tp_metrics)
}


    /* ---------- NEW: EBS widget ---------- */
    {
      "type": "metric",
      "x": 0,
      "y": 35,
      "width": 24,
      "height": 6,
      "properties": {
        "metrics": ${local.ebs_metrics_string},
        "view": "timeSeries",
        "region": "${var.region}",
        "period": 300,
        "stat": "Average",
        "title": "EBS - Avg Read Latency (s) & Throughput Exceeded Check"
      }
    }
