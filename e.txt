terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.0"
    }
  }
}

##########################################
# Provide your target EC2 instance IDs
##########################################
variable "instance_ids" {
  type        = list(string)
  description = "EC2 instance IDs whose attached EBS volumes you want to inspect"
  default     = [
    "i-0123456789abcdef0",
    "i-0fedcba9876543210"
  ]
}

##########################################
# Use aws_ec2_instance to get block device mappings
##########################################
data "aws_ec2_instance" "selected" {
  for_each    = toset(var.instance_ids)
  instance_id = each.value
}

##########################################
# Collect (InstanceId, DeviceName, VolumeId) triples
##########################################
locals {
  attached = flatten([
    for inst in data.aws_ec2_instance.selected : [
      for bdm in inst.block_device_mappings : {
        instance_id = inst.id
        device      = bdm.device_name
        volume_id   = bdm.ebs.volume_id
      }
    ]
  ])

  volume_ids = toset([for a in local.attached : a.volume_id])
}

##########################################
# Lookup each EBS volume by volume-id
##########################################
data "aws_ebs_volume" "by_id" {
  for_each = local.volume_ids

  filter {
    name   = "volume-id"
    values = [each.value]
  }
}

##########################################
# Output one row per attachment with supported attributes
##########################################
output "ebs_volume_details" {
  value = [
    for a in local.attached : {
      instance_id        = a.instance_id
      device             = a.device
      volume_id          = a.volume_id

      size_gib           = data.aws_ebs_volume.by_id[a.volume_id].size
      volume_type        = data.aws_ebs_volume.by_id[a.volume_id].volume_type
      iops               = try(data.aws_ebs_volume.by_id[a.volume_id].iops, null)
      throughput_mb      = try(data.aws_ebs_volume.by_id[a.volume_id].throughput, null)
      availability_zone  = data.aws_ebs_volume.by_id[a.volume_id].availability_zone
      encrypted          = data.aws_ebs_volume.by_id[a.volume_id].encrypted
      multi_attach       = try(data.aws_ebs_volume.by_id[a.volume_id].multi_attach_enabled, null)
      kms_key_id         = try(data.aws_ebs_volume.by_id[a.volume_id].kms_key_id, null)
      name               = try(data.aws_ebs_volume.by_id[a.volume_id].tags["Name"], null)
      tags               = try(data.aws_ebs_volume.by_id[a.volume_id].tags, null)
    }
  ]
}
