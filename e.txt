locals {
  # EBS aggregate metrics via SEARCH + math (no per-VolumeId rows)
  # - ebs_rt: all VolumeTotalReadTime series (Sum)
  # - ebs_ro: all VolumeReadOps series (Sum)
  # - ebs_tp: all VolumeThroughputPercentage series (Average)
  # - ebs_rl: aggregate Avg Read Latency (seconds) = SUM(rt) / SUM(ro) with zero-guard
  # - ebs_te: ThroughputExceededCheck (1 if any volume >100%, else 0)

  ebs_latency_tp_search = [
    [
      {
        expression = "SEARCH('{AWS/EBS,VolumeId} MetricName=\"VolumeTotalReadTime\"', 'Sum', 300)"
        id         = "ebs_rt"
        label      = "EBS - VolumeTotalReadTime (all volumes)"
      }
    ],
    [
      {
        expression = "SEARCH('{AWS/EBS,VolumeId} MetricName=\"VolumeReadOps\"', 'Sum', 300)"
        id         = "ebs_ro"
        label      = "EBS - VolumeReadOps (all volumes)"
      }
    ],
    [
      {
        expression = "SEARCH('{AWS/EBS,VolumeId} MetricName=\"VolumeThroughputPercentage\"', 'Average', 300)"
        id         = "ebs_tp"
        label      = "EBS - VolumeThroughputPercentage (all volumes)"
      }
    ],
    [
      {
        # Guard against division by zero using IF(...)
        expression = "IF(SUM(ebs_ro)>0, SUM(ebs_rt)/SUM(ebs_ro), 0)"
        id         = "ebs_rl"
        label      = "EBS - VolumeAvgReadLatency (s) [Aggregate]"
      }
    ],
    [
      {
        expression = "IF(MAX(ebs_tp)>100, 1, 0)"
        id         = "ebs_te"
        label      = "EBS - ThroughputExceededCheck (1=yes)"
      }
    ]
  ]

  # String for injecting into your local.final heredoc
  ebs_latency_tp_metrics_string = jsonencode(local.ebs_latency_tp_search)
}

    {
      "type": "metric",
      "x": 0,
      "y": 63,
      "width": 24,
      "height": 6,
      "properties": {
        "metrics": ${local.ebs_latency_tp_metrics_string},
        "view": "timeSeries",
        "region": "${var.region}",
        "period": 300,
        "stat": "Average",
        "title": "EBS - Avg Read Latency (s) & Throughput Exceeded Check (aggregate)"
      }
    }
