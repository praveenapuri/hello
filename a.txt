# main.tf
terraform {
  backend "s3" {}
}

# Find all running or pending EC2 instances
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

# Get the full details for each monitored instance
data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

locals {
  # --- Layout Configuration ---
  widget_width  = 8
  widget_height = 6

  # --- Reusable Widget Properties ---
  common_gauge_properties = {
    view    = "gauge",
    region  = provider.aws.region,
    period  = 300,
    stat    = "Average",
    yAxis   = { left = { min = 0, max = 100 } },
    # Added the 80% threshold annotation here
    annotations = {
      horizontal = [
        {
          color = "#ff0000",
          label = "Threshold 80%",
          value = 80,
          fill  = "above"
        }
      ]
    }
  }

  # --- Widget Generation ---
  ec2_widgets = flatten([
    for index, instance in values(data.aws_instance.instance_details) : [
      # CPU Gauge
      {
        type   = "metric",
        x      = 0,
        y      = index * local.widget_height,
        width  = local.widget_width,
        height = local.widget_height,
        properties = merge(
          local.common_gauge_properties,
          {
            title   = "CPU - ${coalesce(instance.tags.Name, instance.id)}",
            metrics = [["AWS/EC2", "CPUUtilization", "InstanceId", instance.id]]
          }
        )
      },
      # Memory Gauge
      {
        type   = "metric",
        x      = local.widget_width,
        y      = index * local.widget_height,
        width  = local.widget_width,
        height = local.widget_height,
        properties = merge(
          local.common_gauge_properties,
          {
            title   = "Memory - ${coalesce(instance.tags.Name, instance.id)}",
            metrics = [["CWAgent", "mem_used_percent", "InstanceId", instance.id]]
          }
        )
      },
      # Disk Gauge
      {
        type   = "metric",
        x      = local.widget_width * 2,
        y      = index * local.widget_height,
        width  = local.widget_width,
        height = local.widget_height,
        properties = merge(
          local.common_gauge_properties,
          {
            title   = "Disk - ${coalesce(instance.tags.Name, instance.id)}",
            metrics = [["CWAgent", "disk_used_percent", "InstanceId", instance.id, "device", "nvme0n1p1", "fstype", "xfs", "path", "/"]]
          }
        )
      }
    ]
  ])
}

# Create the CloudWatch Dashboard
resource "aws_cloudwatch_dashboard" "ec2" {
  dashboard_name = "EC2-Health-Compact"

  dashboard_body = jsonencode({
    widgets = local.ec2_widgets
  })
}
