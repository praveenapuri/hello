# main.tf
terraform {
  backend "s3" {}
}

# Find all running or pending EC2 instances
data "aws_instances" "monitored_instances" {
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }
}

# Get the full details for each monitored instance
data "aws_instance" "instance_details" {
  for_each    = toset(data.aws_instances.monitored_instances.ids)
  instance_id = each.key
}

locals {
  # --- Layout Configuration ---
  widget_width  = 8
  widget_height = 6

  # --- Reusable Widget Properties ---
  common_gauge_properties = {
    view   = "gauge"
    region = var.region
    period = 300
    stat   = "Average"
    yAxis = {
      left = {
        min = 0
        max = 100
      }
    }
    annotations = {
      horizontal = [
        {
          color = "#ff0000"
          label = "Threshold 80%"
          value = 80
          fill  = "above"
        }
      ]
    }
  }
  nos_ec2 = length(data.aws_instance.instance_details)

  # --- Metrics Generation ---
  cpu_metrics = [
    for instance in slice(values(data.aws_instance.instance_details),0,local.nos_ec2) : [
      "AWS/EC2", "CPUUtilization", "InstanceId", instance.id,
      { "label" : "CPU - ${coalesce(instance.tags.Name, instance.id)}" }
    ]
  ]
  mem_metrics = [
    for instance in slice(values(data.aws_instance.instance_details),0,local.nos_ec2) : [

      "CWAgent", "mem_used_percent", "InstanceId", instance.id,
      { "label" : "%MEM_USED - ${coalesce(instance.tags.Name, instance.id)}" }

    ]
  ]
  disk_metrics = [
    for instance in slice(values(data.aws_instance.instance_details),0,local.nos_ec2) : [
      "CWAgent", "disk_used_percent", "InstanceId", instance.id,
      { "label": "%Disk - ${coalesce(instance.tags.Name, instance.id)}" }

    ]
  ]


  all_metrics = concat(local.cpu_metrics, local.mem_metrics, local.disk_metrics)
  metrics_string1 = jsonencode(local.all_metrics)
  metrics_string = local.metrics_string1#substr(local.metrics_string1, 1, length(local.metrics_string1) - 2)


  # --- Widget Generation ---
  ec2_widgets = ([
    {
      type   = "metric"
      x      = 0
      y      = 0
      width  = 12
      height = 8
      properties = merge(
        local.common_gauge_properties,
        {
          metrics = local.all_metrics
        }
      )
    }
  ])

  count = length(data.aws_instance.instance_details)
  final = <<-EOF
{
    "widgets" : [
      {
          "type"   : "metric",
          "x": 0,
          "y": 0,
          "width" :12,
          "height" : 6,
          "properties" :
          {
			"metrics" : ${local.metrics_string},
			"view": "gauge",
			"region" :  "${var.region}",
			"yAxis" : {
				"left" : {
					"min" : 2,
					"max" : 100
					}
			},
			"liveData": true,
			"period": 300,
			"title": "EC2-Health"
          }
      }
    ]
}
EOF

  parsed_json = try(jsondecode(local.final), null)
  is_valid_json = local.parsed_json != null
}

output "raw_json_string" {
  value = replace(local.final, "\n", " ")
}

output "is_valid_json" {
  value = local.is_valid_json
}

output "metrics_string" {
  value = local.metrics_string
}

# Create the CloudWatch Dashboard for ec2 instances
resource "aws_cloudwatch_dashboard" "ec2" {
  dashboard_name = "EC2-Health-dev"
  dashboard_body =  local.final
}
