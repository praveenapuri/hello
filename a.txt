# main.tf

# 1. Configure the AWS Provider
provider "aws" {
  region = "us-east-1"
}

# 2. Dynamically retrieve details of all EC2 instances with a specific tag
data "aws_instances" "monitored_instances" {
  # Find instances that are in the 'running' or 'pending' state
  filter {
    name   = "instance-state-name"
    values = ["running", "pending"]
  }

  # Find instances that have the tag "Monitoring" with the value "enabled"
  filter {
    name   = "tag:Monitoring"
    values = ["enabled"]
  }
}

# 3. Use a for loop to dynamically build the dashboard configurations
locals {
  aws_region = "us-east-1"

  ec2_dashboards = {
    # This for loop iterates over the IDs found by the data source
    for id in data.aws_instances.monitored_instances.ids :
    # The map key becomes the instance ID
    id => {
      instance_id      = id
      # You can add default disk configurations here if they are consistent.
      # For more advanced setups, you could use instance tags to define these values.
      disk_device      = "nvme0n1p1"
      disk_path        = "/"
      file_system_type = "xfs"
    }
  }
}

# 4. Create the CloudWatch Dashboard resource using the dynamically generated map
resource "aws_cloudwatch_dashboard" "ec2" {
  for_each = local.ec2_dashboards

  dashboard_name = "EC2-Health-${each.value.instance_id}" # Use the instance ID in the name

  dashboard_body = jsonencode({
    widgets = [
      # CPU Utilization Widget
      {
        type   = "metric",
        x      = 0, y = 0, width = 8, height = 6,
        properties = {
          metrics     = [["AWS/EC2", "CPUUtilization", "InstanceId", each.value.instance_id]],
          period      = 300,
          stat        = "Average",
          region      = local.aws_region,
          title       = "EC2 CPU Utilization (%)",
          yAxis       = { left = { min = 0, max = 100 } },
          annotations = { horizontal = [{ color = "#ff0000", label = "Threshold 80%", value = 80 }] }
        }
      },
      # Memory Utilization Widget
      {
        type   = "metric",
        x      = 8, y = 0, width = 8, height = 6,
        properties = {
          metrics     = [["CWAgent", "mem_used_percent", "InstanceId", each.value.instance_id]],
          period      = 300,
          stat        = "Average",
          region      = local.aws_region,
          title       = "Memory Utilization (%)",
          yAxis       = { left = { min = 0, max = 100 } },
          annotations = { horizontal = [{ color = "#ff0000", label = "Threshold 80%", value = 80 }] }
        }
      },
      # Disk Utilization Widget
      {
        type   = "metric",
        x      = 16, y = 0, width = 8, height = 6,
        properties = {
          metrics = [[
            "CWAgent", "disk_used_percent",
            "InstanceId", each.value.instance_id,
            "device", each.value.disk_device,
            "fstype", each.value.file_system_type,
            "path", each.value.disk_path
          ]],
          period      = 300,
          stat        = "Average",
          region      = local.aws_region,
          title       = "Disk Utilization (%) on ${each.value.disk_path}",
          yAxis       = { left = { min = 0, max = 100 } },
          annotations = { horizontal = [{ color = "#ff0000", label = "Threshold 80%", value = 80 }] }
        }
      }
    ]
  })
}

# 5. (Optional) Output the names of the created dashboards
output "created_dashboard_names" {
  description = "A map of the names of all created CloudWatch dashboards."
  value       = { for k, v in aws_cloudwatch_dashboard.ec2 : k => v.dashboard_name }
}

output "instances_found" {
  description = "List of EC2 instance IDs found with the specified tag."
  value       = data.aws_instances.monitored_instances.ids
}
