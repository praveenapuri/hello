Create the IAM Role:

Define the IAM role with the necessary permissions in your Terraform configuration. Here is an example:

resource "aws_iam_role" "example_role" {
  name = "example_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          AWS = "arn:aws:iam::<account-id>:role/<role-name>"
        },
        Action = "sts:AssumeRole",
        Condition = {
          StringEquals = {
            "aws:PrincipalTag/ADGroup" = "<AD-group-name>"
          }
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "example_policy_attachment" {
  role       = aws_iam_role.example_role.name
  policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
}
Create the AD Group Mapping:

Use AWS IAM Identity Center (formerly AWS Single Sign-On) to map the AD group to the IAM role. This can be done through the IAM Identity Center console by selecting the AD group and assigning the IAM role to it12.
Apply the Configuration:

Run terraform init to initialize the Terraform configuration.
Run terraform apply to apply the configuration and create the IAM role with the specified trust relationship.
Verify the Assignment:

Ensure that the users in the AD group can assume the IAM role and access the AWS resources as defined by the role's policies.
For more detailed instructions, you can refer to the AWS documentation on assigning IAM roles to AD groups and managing roles for AWS Managed Microsoft AD.
