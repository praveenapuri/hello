# SSM Command to backup route53 records to S3
resource "aws_ssm_document" "route53_backup_doc" {
  name            = "epic-payer-${var.env}-backup-Route53-To-S3"
  document_type   = "Command"
  document_format = "JSON"

  content = jsonencode({
    schemaVersion = "2.2",
    description   = "Backs up all Route 53 hosted zone records to the S3 bucket ${data.aws_s3_bucket.route53_backups.bucket} in a restorable format.",
    parameters    = {},
    mainSteps = [
      {
        action = "aws:runShellScript",
        name   = "backupRoute53",
        inputs = {
          runCommand = [
            "#!/bin/sh",
            "set -xe",
            "",
            "echo '--- SCRIPT START ---'",
            "S3_BUCKET_NAME=\"${data.aws_s3_bucket.route53_backups.bucket}\"",
            "S3_FOLDER=\"route53-backups\"",
            "",
            "# Check for jq and install if not present",
            "if ! type jq >/dev/null 2>&1; then",
            "    echo 'jq not found. Attempting to install...'",
            "    if [ -f /etc/redhat-release ]; then",
            "        sudo yum install -y jq",
            "    elif [ -f /etc/lsb-release ]; then",
            "        sudo apt-get update && sudo apt-get install -y jq",
            "    else",
            "        echo 'Unsupported OS for automatic jq installation. Please install jq manually.' >&2",
            "        exit 1",
            "    fi",
            "fi",
            "",
            "# Use IMDSv2 to get the region securely with verbose logging",
            "echo 'Fetching IMDSv2 token with verbose output...'",
            "TOKEN=`curl -v -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`",
            "echo \"--- TOKEN VALUE ---: [$${TOKEN}]\"",
            "if [ -z \"$${TOKEN}\" ]; then",
            "    echo 'ERROR: Failed to retrieve IMDSv2 token. Check instance metadata settings and network connectivity.' >&2",
            "    exit 1",
            "fi",
            "echo 'Fetching region with verbose output...'",
            "REGION=`curl -v -H \"X-aws-ec2-metadata-token: $${TOKEN}\" \"http://169.254.169.254/latest/meta-data/placement/region\"`",
            "echo \"--- REGION VALUE ---: [$${REGION}]\"",
            "if [ -z \"$${REGION}\" ]; then",
            "    echo 'ERROR: Failed to retrieve region from instance metadata.' >&2",
            "    exit 1",
            "fi",
            "echo \"Region identified as: $${REGION}\"",
            "",
            "BACKUP_DIR=\"/tmp/route53-backups-tmp\"",
            "mkdir -p \"$${BACKUP_DIR}\"",
            "",
            "# Get hosted zones as JSON for reliable parsing",
            "echo 'Listing hosted zones...'",
            "HOSTED_ZONES_JSON=`aws route53 list-hosted-zones --query 'HostedZones' --output json --region $${REGION}`",
            "",
            "echo '--- RAW HOSTED ZONES DATA ---'",
            "echo \"$${HOSTED_ZONES_JSON}\"",
            "echo '---------------------------'",
            "",
            "if [ -z \"$${HOSTED_ZONES_JSON}\" ] || [ \"$${HOSTED_ZONES_JSON}\" = \"[]\" ]; then",
            "    echo \"No hosted zones found.\"",
            "    exit 0",
            "fi",
            "",
            "# Loop through each zone using a robust while-read loop",
            "echo \"$${HOSTED_ZONES_JSON}\" | jq -c '.[]' | while read -r zone_json; do",
            "    RAW_ZONE_ID=`echo \"$${zone_json}\" | jq -r '.Id'`",
            "    ZONE_NAME=`echo \"$${zone_json}\" | jq -r '.Name'`",
            "    ZONE_ID=`echo \"$${RAW_ZONE_ID}\" | cut -d'/' -f3`",
            "",
            "    TIMESTAMP=`date +%Y-%m-%d-%H%M%S`",
            "    FILENAME_BASE=`echo \"$${ZONE_NAME}\" | sed 's/\\\\.$//' | tr '.' '_'`",
            "    FILENAME=\"$${FILENAME_BASE}_$${TIMESTAMP}.json\"",
            "    RAW_RECORDS_FILE=\"$${BACKUP_DIR}/$${FILENAME_BASE}-raw.json\"",
            "    BACKUP_FILE_PATH=\"$${BACKUP_DIR}/$${FILENAME}\"",
            "",
            "    echo \"Backing up zone: $${ZONE_NAME} ($${ZONE_ID}) to file $${FILENAME}\"",
            "    aws route53 list-resource-record-sets --hosted-zone-id \"$${ZONE_ID}\" --region $${REGION} > \"$${RAW_RECORDS_FILE}\"",
            "",
            "    # Validate that the fetched records file is valid JSON and has ResourceRecordSets",
            "    if ! jq -e '.ResourceRecordSets' \"$${RAW_RECORDS_FILE}\" >/dev/null 2>&1; then",
            "        echo \"Zone $${ZONE_NAME} contains no valid records or the API call failed. Skipping.\"",
            "        continue",
            "    fi",
            "",
            "    # Use jq to transform all records into a restorable format",
            "    COMMENT_TEXT=\"Restore from backup $${TIMESTAMP} for $${ZONE_NAME}\"",
            "    jq --arg comment \"$${COMMENT_TEXT}\" '{ \"Comment\": $$comment, \"Changes\": [ .ResourceRecordSets[] | { \"Action\": \"UPSERT\", \"ResourceRecordSet\": . } ] }' \"$${RAW_RECORDS_FILE}\" > \"$${BACKUP_FILE_PATH}\"",
            "",
            "    # Safely check if the generated backup file has any changes before uploading",
            "    CHANGES_COUNT=0",
            "    if jq -e '.Changes' \"$${BACKUP_FILE_PATH}\" >/dev/null 2>&1; then",
            "        CHANGES_COUNT=`jq '.Changes | length' \"$${BACKUP_FILE_PATH}\" 2>/dev/null || echo 0`",
            "    fi",
            "",
            "    if [ \"$$CHANGES_COUNT\" -gt 0 ]; then",
            "        S3_KEY=\"$${S3_FOLDER}/$${FILENAME}\"",
            "        echo \"Uploading to s3://$${S3_BUCKET_NAME}/$${S3_KEY}\"",
            "        aws s3 cp \"$${BACKUP_FILE_PATH}\" \"s3://$${S3_BUCKET_NAME}/$${S3_KEY}\" --region $${REGION}",
            "    else",
            "        echo \"Zone $${ZONE_NAME} contains no records to back up. Skipping upload.\"",
            "    fi",
            "done",
            "",
            "echo \"Cleaning up temporary directory: $${BACKUP_DIR}\"",
            "rm -rf \"$${BACKUP_DIR}\"",
            "",
            "echo \"Route 53 backup complete.\""
          ]
        }
      }
    ]
  })
}
